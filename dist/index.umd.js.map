{"version":3,"file":"index.umd.js","sources":["../src/TimeSpan.ts"],"sourcesContent":["const msecPerSecond = 1000;\r\nconst msecPerMinute = 1000 * 60;\r\nconst msecPerHour = 1000 * 60 * 60;\r\nconst msecPerDay = 1000 * 60 * 60 * 24;\r\n\r\n\r\nexport default class TimeSpan {\r\n    _milliseconds: number = 0;\r\n\r\n    constructor(milliseconds: number) {\r\n        this._milliseconds = milliseconds\r\n    }\r\n\r\n    static fromSeconds(seconds: number) {\r\n        return new TimeSpan(seconds * msecPerSecond);\r\n    }\r\n    static fromMinutes(minutes: number) {\r\n        return new TimeSpan(minutes * msecPerMinute);\r\n    }\r\n    static fromHours(hours: number) {\r\n        return new TimeSpan(hours * msecPerHour);\r\n    }\r\n    static fromDays(days: number) {\r\n        return new TimeSpan(days * msecPerDay);\r\n    }\r\n\r\n    add(timespan: TimeSpan) {\r\n        return new TimeSpan(this.milliseconds + timespan.milliseconds)\r\n    }\r\n    subtract(timespan: TimeSpan) {\r\n        return new TimeSpan(this.milliseconds - timespan.milliseconds)\r\n    }\r\n    duration() {\r\n        return new TimeSpan(Math.abs(this.milliseconds))\r\n    }\r\n\r\n    addMilliseconds(milliseconds: number) {\r\n        this._milliseconds += milliseconds\r\n    }\r\n    subtractMilliseconds(milliseconds: number) {\r\n        this._milliseconds -= milliseconds\r\n    }\r\n\r\n    addSeconds(seconds: number) {\r\n        this._milliseconds += (seconds * msecPerSecond)\r\n    }\r\n    subtractSeconds(seconds: number) {\r\n        this._milliseconds -= (seconds * msecPerSecond)\r\n    }\r\n\r\n    addMinutes(minutes: number) {\r\n        this._milliseconds += (minutes * msecPerMinute)\r\n    }\r\n    subtractMinutes(minutes: number) {\r\n        this._milliseconds -= (minutes * msecPerMinute)\r\n    }\r\n\r\n    addHours(hours: number) {\r\n        this._milliseconds += (hours * msecPerHour)\r\n    }\r\n    subtractHours(hours: number) {\r\n        this._milliseconds -= (hours * msecPerHour)\r\n    }\r\n\r\n    addDays(days: number) {\r\n        this._milliseconds += (days * msecPerDay)\r\n    }\r\n    subtractDays(days: number) {\r\n        this._milliseconds -= (days * msecPerDay)\r\n    }\r\n\r\n\r\n    get milliseconds() {\r\n        return this._milliseconds;\r\n    }\r\n    get seconds() {\r\n        return this._milliseconds / msecPerSecond;\r\n    }\r\n    get minutes() {\r\n        return this._milliseconds / msecPerMinute;\r\n    }\r\n    get hours() {\r\n        return this._milliseconds / msecPerHour;\r\n    }\r\n    get days() {\r\n        return this._milliseconds / msecPerDay;\r\n    }\r\n\r\n    get totalMilliseconds() {\r\n        return Math.floor(this._milliseconds);\r\n    }\r\n    get totalSeconds() {\r\n        return Math.floor(this._milliseconds / msecPerSecond);\r\n    }\r\n    get totalMinutes() {\r\n        return Math.floor(this._milliseconds / msecPerMinute);\r\n    }\r\n    get totalHours() {\r\n        return Math.floor(this._milliseconds / msecPerHour);\r\n    }\r\n    get totalDays() {\r\n        return Math.floor(this._milliseconds / msecPerDay);\r\n    }\r\n\r\n    equals(compare: TimeSpan) {\r\n        return compare.milliseconds === this._milliseconds;\r\n    }\r\n    lesser(compare: TimeSpan) {\r\n        return this._milliseconds < compare.milliseconds;\r\n    }\r\n    lesserEqual(compare: TimeSpan) {\r\n        return this._milliseconds <= compare.milliseconds;\r\n    }\r\n    greater(compare: TimeSpan) {\r\n        return this._milliseconds > compare.milliseconds;\r\n    }\r\n    greaterEqual(compare: TimeSpan) {\r\n        return this._milliseconds >= compare.milliseconds;\r\n    }\r\n\r\n}\r\n\r\nTimeSpan.prototype.toString = function () {\r\n    const formatter = new Intl.NumberFormat(undefined, { minimumIntegerDigits: 2 })\r\n    const days = Math.floor(this.milliseconds / msecPerDay)\r\n    let remaining = this.milliseconds % msecPerDay\r\n    const hours = Math.floor(remaining / msecPerHour)\r\n    remaining = remaining % msecPerHour\r\n    const minutes = Math.floor(remaining / msecPerMinute)\r\n    remaining = remaining % msecPerMinute\r\n    const seconds = Math.floor(remaining / msecPerSecond)\r\n    remaining = remaining % msecPerSecond\r\n    const milliseconds = remaining\r\n    return `${days}.${formatter.format(hours)}:${formatter.format(minutes)}:${formatter.format(seconds)}.${milliseconds}`;\r\n}\r\n"],"names":["msecPerSecond","msecPerMinute","msecPerHour","msecPerDay","TimeSpan","milliseconds","_milliseconds","this","fromSeconds","seconds","fromMinutes","minutes","fromHours","hours","fromDays","days","add","timespan","subtract","duration","Math","abs","addMilliseconds","subtractMilliseconds","addSeconds","subtractSeconds","addMinutes","subtractMinutes","addHours","subtractHours","addDays","subtractDays","equals","compare","lesser","lesserEqual","greater","greaterEqual","floor","prototype","toString","formatter","Intl","NumberFormat","undefined","minimumIntegerDigits","remaining","format"],"mappings":"oOAAA,IAAMA,EAAgB,IAChBC,EAAgB,IAChBC,EAAc,KACdC,EAAa,MAGEC,aAGjB,WAAYC,QAFZC,cAAwB,EAGpBC,KAAKD,cAAgBD,IAGlBG,YAAP,SAAmBC,GACf,WAAWL,EAASK,EAAUT,MAE3BU,YAAP,SAAmBC,GACf,WAAWP,EAASO,EAAUV,MAE3BW,UAAP,SAAiBC,GACb,WAAWT,EAASS,EAAQX,MAEzBY,SAAP,SAAgBC,GACZ,WAAWX,EAASW,EAAOZ,iCAG/Ba,IAAA,SAAIC,GACA,WAAWb,EAASG,KAAKF,aAAeY,EAASZ,iBAErDa,SAAA,SAASD,GACL,WAAWb,EAASG,KAAKF,aAAeY,EAASZ,iBAErDc,SAAA,WACI,WAAWf,EAASgB,KAAKC,IAAId,KAAKF,kBAGtCiB,gBAAA,SAAgBjB,GACZE,KAAKD,eAAiBD,KAE1BkB,qBAAA,SAAqBlB,GACjBE,KAAKD,eAAiBD,KAG1BmB,WAAA,SAAWf,GACPF,KAAKD,eAAkBG,EAAUT,KAErCyB,gBAAA,SAAgBhB,GACZF,KAAKD,eAAkBG,EAAUT,KAGrC0B,WAAA,SAAWf,GACPJ,KAAKD,eAAkBK,EAAUV,KAErC0B,gBAAA,SAAgBhB,GACZJ,KAAKD,eAAkBK,EAAUV,KAGrC2B,SAAA,SAASf,GACLN,KAAKD,eAAkBO,EAAQX,KAEnC2B,cAAA,SAAchB,GACVN,KAAKD,eAAkBO,EAAQX,KAGnC4B,QAAA,SAAQf,GACJR,KAAKD,eAAkBS,EAAOZ,KAElC4B,aAAA,SAAahB,GACTR,KAAKD,eAAkBS,EAAOZ,KAoClC6B,OAAA,SAAOC,GACH,OAAOA,EAAQ5B,eAAiBE,KAAKD,iBAEzC4B,OAAA,SAAOD,GACH,YAAY3B,cAAgB2B,EAAQ5B,gBAExC8B,YAAA,SAAYF,GACR,YAAY3B,eAAiB2B,EAAQ5B,gBAEzC+B,QAAA,SAAQH,GACJ,YAAY3B,cAAgB2B,EAAQ5B,gBAExCgC,aAAA,SAAaJ,GACT,YAAY3B,eAAiB2B,EAAQ5B,0CA7CzC,WACI,YAAYC,mCAEhB,WACI,YAAYA,cAAgBN,uBAEhC,WACI,YAAYM,cAAgBL,qBAEhC,WACI,YAAYK,cAAgBJ,oBAEhC,WACI,YAAYI,cAAgBH,iCAGhC,WACI,OAAOiB,KAAKkB,MAAM/B,KAAKD,yCAE3B,WACI,OAAOc,KAAKkB,MAAM/B,KAAKD,cAAgBN,6BAE3C,WACI,OAAOoB,KAAKkB,MAAM/B,KAAKD,cAAgBL,2BAE3C,WACI,OAAOmB,KAAKkB,MAAM/B,KAAKD,cAAgBJ,0BAE3C,WACI,OAAOkB,KAAKkB,MAAM/B,KAAKD,cAAgBH,iMAqB/CC,EAASmC,UAAUC,SAAW,WAC1B,IAAMC,EAAY,IAAIC,KAAKC,kBAAaC,EAAW,CAAEC,qBAAsB,IACrE9B,EAAOK,KAAKkB,MAAM/B,KAAKF,aAAeF,GACxC2C,EAAYvC,KAAKF,aAAeF,EAC9BU,EAAQO,KAAKkB,MAAMQ,EAAY5C,GACrC4C,GAAwB5C,EACxB,IAAMS,EAAUS,KAAKkB,MAAMQ,EAAY7C,GACvC6C,GAAwB7C,EACxB,IAAMQ,EAAUW,KAAKkB,MAAMQ,EAAY9C,GAEjCK,EADNyC,GAAwB9C,EAExB,OAAUe,MAAQ0B,EAAUM,OAAOlC,OAAU4B,EAAUM,OAAOpC,OAAY8B,EAAUM,OAAOtC,OAAYJ"}