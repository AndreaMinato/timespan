{"version":3,"file":"main.modern.js","sources":["../src/main.ts"],"sourcesContent":["const msecPerSecond = 1000;\nconst msecPerMinute = 1000 * 60;\nconst msecPerHour = 1000 * 60 * 60;\nconst msecPerDay = 1000 * 60 * 60 * 24;\n\n\nexport class TimeSpan {\n    _milliseconds: number = 0;\n\n    constructor(milliseconds: number) {\n        this._milliseconds = milliseconds\n    }\n\n    static fromSeconds(seconds: number) {\n        return new TimeSpan(seconds * msecPerSecond);\n    }\n    static fromMinutes(minutes: number) {\n        return new TimeSpan(minutes * msecPerMinute);\n    }\n    static fromHours(hours: number) {\n        return new TimeSpan(hours * msecPerHour);\n    }\n    static fromDays(days: number) {\n        return new TimeSpan(days * msecPerDay);\n    }\n\n    add(timespan: TimeSpan) {\n        return new TimeSpan(this.milliseconds + timespan.milliseconds)\n    }\n    subtract(timespan: TimeSpan) {\n        return new TimeSpan(this.milliseconds - timespan.milliseconds)\n    }\n    duration() {\n        return new TimeSpan(Math.abs(this.milliseconds))\n    }\n\n    addMilliseconds(milliseconds: number) {\n        this._milliseconds += milliseconds\n    }\n    subtractMilliseconds(milliseconds: number) {\n        this._milliseconds -= milliseconds\n    }\n\n    addSeconds(seconds: number) {\n        this._milliseconds += (seconds * msecPerSecond)\n    }\n    subtractSeconds(seconds: number) {\n        this._milliseconds -= (seconds * msecPerSecond)\n    }\n\n    addMinutes(minutes: number) {\n        this._milliseconds += (minutes * msecPerMinute)\n    }\n    subtractMinutes(minutes: number) {\n        this._milliseconds -= (minutes * msecPerMinute)\n    }\n\n    addHours(hours: number) {\n        this._milliseconds += (hours * msecPerHour)\n    }\n    subtractHours(hours: number) {\n        this._milliseconds -= (hours * msecPerHour)\n    }\n\n    addDays(days: number) {\n        this._milliseconds += (days * msecPerDay)\n    }\n    subtractDays(days: number) {\n        this._milliseconds -= (days * msecPerDay)\n    }\n\n\n    get milliseconds() {\n        return this._milliseconds;\n    }\n    get seconds() {\n        return this._milliseconds / msecPerSecond;\n    }\n    get minutes() {\n        return this._milliseconds / msecPerMinute;\n    }\n    get hours() {\n        return this._milliseconds / msecPerHour;\n    }\n    get days() {\n        return this._milliseconds / msecPerDay;\n    }\n\n    get totalMilliseconds() {\n        return Math.floor(this._milliseconds);\n    }\n    get totalSeconds() {\n        return Math.floor(this._milliseconds / msecPerSecond);\n    }\n    get totalMinutes() {\n        return Math.floor(this._milliseconds / msecPerMinute);\n    }\n    get totalHours() {\n        return Math.floor(this._milliseconds / msecPerHour);\n    }\n    get totalDays() {\n        return Math.floor(this._milliseconds / msecPerDay);\n    }\n\n    equals(compare: TimeSpan) {\n        return compare.milliseconds === this._milliseconds;\n    }\n    lesser(compare: TimeSpan) {\n        return this._milliseconds < compare.milliseconds;\n    }\n    lesserEqual(compare: TimeSpan) {\n        return this._milliseconds <= compare.milliseconds;\n    }\n    greater(compare: TimeSpan) {\n        return this._milliseconds > compare.milliseconds;\n    }\n    greaterEqual(compare: TimeSpan) {\n        return this._milliseconds >= compare.milliseconds;\n    }\n\n}\n\nTimeSpan.prototype.toString = function () {\n    const formatter = new Intl.NumberFormat(undefined, { minimumIntegerDigits: 2 })\n    const days = Math.floor(this.milliseconds / msecPerDay)\n    let remaining = this.milliseconds % msecPerDay\n    const hours = Math.floor(remaining / msecPerHour)\n    remaining = remaining % msecPerHour\n    const minutes = Math.floor(remaining / msecPerMinute)\n    remaining = remaining % msecPerMinute\n    const seconds = Math.floor(remaining / msecPerSecond)\n    remaining = remaining % msecPerSecond\n    const milliseconds = remaining\n    const msFormatter = new Intl.NumberFormat(undefined, { minimumIntegerDigits: 3 })\n    return `${days}.${formatter.format(hours)}:${formatter.format(minutes)}:${formatter.format(seconds)}.${msFormatter.format(milliseconds)}`;\n}\n"],"names":["TimeSpan","constructor","milliseconds","_milliseconds","this","[object Object]","seconds","minutes","hours","days","add","timespan","subtract","duration","Math","abs","addMilliseconds","subtractMilliseconds","addSeconds","subtractSeconds","addMinutes","subtractMinutes","addHours","subtractHours","addDays","subtractDays","totalMilliseconds","floor","totalSeconds","totalMinutes","totalHours","totalDays","equals","compare","lesser","lesserEqual","greater","greaterEqual","prototype","toString","formatter","Intl","NumberFormat","undefined","minimumIntegerDigits","remaining","msFormatter","format"],"mappings":"MAMaA,EAGTC,YAAYC,QAFZC,cAAwB,EAGpBC,KAAKD,cAAgBD,EAGPG,mBAACC,GACf,WAAWN,EAdG,IAcMM,GAEND,mBAACE,GACf,WAAWP,EAhBG,IAgBMO,GAERF,iBAACG,GACb,WAAWR,EAlBC,KAkBQQ,GAETH,gBAACI,GACZ,WAAWT,EApBA,MAoBSS,GAGxBC,IAAIC,GACA,WAAWX,EAASI,KAAKF,aAAeS,EAAST,cAErDU,SAASD,GACL,WAAWX,EAASI,KAAKF,aAAeS,EAAST,cAErDW,WACI,WAAWb,EAASc,KAAKC,IAAIX,KAAKF,eAGtCc,gBAAgBd,GACZE,KAAKD,eAAiBD,EAE1Be,qBAAqBf,GACjBE,KAAKD,eAAiBD,EAG1BgB,WAAWZ,GACPF,KAAKD,eA5CS,IA4CSG,EAE3Ba,gBAAgBb,GACZF,KAAKD,eA/CS,IA+CSG,EAG3Bc,WAAWb,GACPH,KAAKD,eAlDS,IAkDSI,EAE3Bc,gBAAgBd,GACZH,KAAKD,eArDS,IAqDSI,EAG3Be,SAASd,GACLJ,KAAKD,eAxDO,KAwDWK,EAE3Be,cAAcf,GACVJ,KAAKD,eA3DO,KA2DWK,EAG3BgB,QAAQf,GACJL,KAAKD,eA9DM,MA8DYM,EAE3BgB,aAAahB,GACTL,KAAKD,eAjEM,MAiEYM,EAIXP,mBACZ,YAAYC,cAELG,cACP,YAAYH,cA5EE,IA8EPI,cACP,YAAYJ,cA9EE,IAgFTK,YACL,YAAYL,cAhFA,KAkFRM,WACJ,YAAYN,cAlFD,MAqFMuB,wBACjB,OAAOZ,KAAKa,MAAMvB,KAAKD,eAEXyB,mBACZ,OAAOd,KAAKa,MAAMvB,KAAKD,cA5FT,KA8FF0B,mBACZ,OAAOf,KAAKa,MAAMvB,KAAKD,cA9FT,KAgGJ2B,iBACV,OAAOhB,KAAKa,MAAMvB,KAAKD,cAhGX,MAkGH4B,gBACT,OAAOjB,KAAKa,MAAMvB,KAAKD,cAlGZ,OAqGf6B,OAAOC,GACH,OAAOA,EAAQ/B,eAAiBE,KAAKD,cAEzC+B,OAAOD,GACH,YAAY9B,cAAgB8B,EAAQ/B,aAExCiC,YAAYF,GACR,YAAY9B,eAAiB8B,EAAQ/B,aAEzCkC,QAAQH,GACJ,YAAY9B,cAAgB8B,EAAQ/B,aAExCmC,aAAaJ,GACT,YAAY9B,eAAiB8B,EAAQ/B,cAK7CF,EAASsC,UAAUC,SAAW,WAC1B,MAAMC,EAAY,IAAIC,KAAKC,kBAAaC,EAAW,CAAEC,qBAAsB,IACrEnC,EAAOK,KAAKa,MAAMvB,KAAKF,aAzHd,OA0Hf,IAAI2C,EAAYzC,KAAKF,aA1HN,MA2Hf,MAAMM,EAAQM,KAAKa,MAAMkB,EA5HT,MA6HhBA,GA7HgB,KA8HhB,MAAMtC,EAAUO,KAAKa,MAAMkB,EA/HT,KAgIlBA,GAhIkB,IAiIlB,MAAMvC,EAAUQ,KAAKa,MAAMkB,EAlIT,KAmIlBA,GAnIkB,IAoIlB,MAAM3C,EAAe2C,EACfC,EAAc,IAAIL,KAAKC,kBAAaC,EAAW,CAAEC,qBAAsB,IAC7E,SAAUnC,KAAQ+B,EAAUO,OAAOvC,MAAUgC,EAAUO,OAAOxC,MAAYiC,EAAUO,OAAOzC,MAAYwC,EAAYC,OAAO7C"}